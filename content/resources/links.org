---
title: "Links"
date:
description: "Pointers to interesting resources"
draft: true
---

TODO revise Feedly

Podcasts...

Medium...

- https://zkproof.org/
- https://homomorphicencryption.org/
- https://www.mpcalliance.org/
- https://github.com/rdragos/awesome-mpc
- https://www.partisiablockchain.com/resources https://medium.com/partisia-blockchain
- https://www.ccs.neu.edu/~rancohen/cryptotalks.html
- https://simons.berkeley.edu/workshops/schedule/16369
- https://kconrad.math.uconn.edu/blurbs/
- https://people.csail.mit.edu/vinodv/FHE/FHE-refs.html
- https://simons.berkeley.edu/workshops/schedule/10565
- https://www.mikedane.com/static-site-generators/hugo/

* Blogs and Forums

* Cryptography
- [[https://web.cs.ucdavis.edu/~rogaway/papers/moral-fn.pdf][The Moral Character of Cryptographic Work - Phillip Rogaway]]. Interesting critique on the value and impact of cryptographic /research/ on our real world, emphasizing its significance (or rather, the lack of it) in our society. Great read to consider points where we can improve as researchers and social beings.
- [[http://anotherlook.ca/][Another Look]]....

* Interesting Linux Tools and Resources

** Pentesting
- aircrack-ng
- ...TODO OSINT
- zenmap
- https://tryhackme.com/
- https://www.picoctf.org/
- https://overthewire.org/wargames/
- Cryptopals: https://cryptopals.com/sets/1

** Linux
- Steps in context switching https://stackoverflow.com/questions/7439608/steps-in-context-switching
- Processes (and other internals) in Linux: https://0xax.gitbooks.io/linux-insides/
- https://www.happyassassin.net/2014/01/25/uefi-boot-how-does-that-actually-work-then/ https://linuxhint.com/understanding_boot_process_bios_uefi/

** Linux Executables
Let's say we write a file in C, called `hello.c`. The `gcc` compiler goes through several stages to be able to generate the final `hello` executable. These stages are preprocessing, compilation, assembling and linking.

The preprocessing simply makes the source files self-contained by 'pasting' all loaded libraries, expanding macros and so on. The assembler transforms this into assembly language (use `gcc -S *` to stop at this stage). The assembler turns this into object (or machine) code (use `gcc -c *` for this step).

A nice overview of these steps and the resulting ELF format: https://www.tenouk.com/Bufferoverflowc/Bufferoverflow1b.html

## Linker

Learned a lot from [here](https://www.tenouk.com/Bufferoverflowc/Bufferoverflow1c.html).

I think the linking is the most exiting step in the chain. First a bit of information on executable formats, focusing on ELF (Executable and Linkable Format). Such file is made up of so-called *sections*, and these can be read using `readelf *`. Common sections include: 
- `.text`: The code
- `.data`: Initialized global and static variables
- `.rdata`: Read-only constants
- `.bss`: (Block-started symbol) I think this is the heap, or more precisely, it describes the space for it.

Finally, among other things, it has a section `.reloc` that describes how data is arranged in the file, which is useful at execution time. It also includes a symbol table that maps symbols ("variable" names in high-level code?) to actual data. More details on the ELF format can be found here: [understanding the ELF format](https://blog.k3170makan.com/2018/10/introduction-to-elf-format-part-vi.html).

The linker is in charge of taking this information and producing a machine-code file from it. In a **statically linked** executable, the dependencies (from compiled files `*.a`) are loaded into the executable itself. This is the simplest type of linking. In this case, the linker is in charge of producing the whole code that will be executed (no external calls will be made) and therefore it knows all the positions that will be reached. The drawback of this approach is that it produces large executable files. This is achieved in gcc by using the flag `-static`.

In contrast, **dynamically linked** executables are not self-contained, and instead contain information about what they need, which is used at *runtime* to load what would be the full code to be executed, including dependencies. 

### More about dynamic linking

The main reason why dynamic linking is way more complicated, is because many machine instructions require *absolute addresses*, but when dealing with a shared library it is not possible to know exaclty where this library will be loaded into memory, so pointing to it becomes hard. Explained by [Eli](https://eli.thegreenplace.net/2011/08/25/load-time-relocation-of-shared-libraries):

> The reason for this is simple. Each program can use any number of shared libraries, and there's simply no way to know in advance where any given shared library will be loaded in the process's virtual memory.

Things like memory-layout randomization also make this hard to follow.

It is the job of the dynamic linker, or dynamic loader (`/lib/ld-linux.so.2`), to resolve this at run time. This can be handled either with *load-time relocation* or *position-indendent code*. In load-time relocation, the loader uses information in the `rel.dyn` section of the executable (to see it use `readelf -r *`) to correct the "errors" in the linking stage, which used "default and wrong" addresses for external dependencies.

### Position Independent Code (PIC)

It seems the recommended way to deal with dynamic libraries is via position-independent code. I use [this resource](https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries/) to learn about it. The main problem with load-time relocation is (besides performance due to the relocation itself) non-shareability: each process that loads a given library will place it somewhere and the loader will apply relocations based on this location. In load-time relocation, Linux doesn't ensure different processes load the library to the same address. Also, in terms of security, the text section of the library has to be writable, which poses a risk.

Recall that the problematic aspect of dynamic libraries is that absolute addresses need to be known at runtime (since machine-code instructions use absolute addresses). Load-time relocation deals with this by literally rewriting the instructions from the executable so that they point to the right locations, known at runtime. Instead, PIC leverages the fact that the linker knows the relative offsets (w.r.t. the instruction pointer) of where the libray should be, it just doesn't know the absolute positions. This is still not enough because, again, the executable needs absolute addresses and not relative. However, the trick is to somehow extract the address of the current instruction, which, together with the relative offset known at link time, leads to the absolute address.

This is achieved via GOTs (Global Offset Tables). These reside in the data section. Instead of pointing directly to external data, the code now points to entries in this table, whose position is known at link time. This table is populated at runtime, exploiting somehow (didn't read the details) the fact that whenever a function call takes place, the address of the current instruction is stored in memory to be resumed later on.

There are much more details to this, explained in the article above.

# Loaders

I studied [this reference](https://embeddedartistry.com/blog/2019/04/08/a-general-overview-of-what-happens-before-main/). This link also provides a bunch of references for further reading. [Wikipedia article](https://en.wikipedia.org/wiki/Loader_(computing)).

At runtime, there is a process in charge of setting up the environment so that other processes can run. Loaders put the desired program into RAM and perform several tasks. From the link above, these are in charge of:
- Check permissions
- Allocate space for the program’s stack
- Allocate space for the program’s heap
- Initialize registers (e.g., stack pointer)
- Push argc, argv, and envp onto the program stack
- Map virtual address spaces
- Dynamic linking
- Relocations
- Call pre-initialization functions

The loader includes the dynamic linking in charge of handling dynamic libraries. It leads to the execution of `_start`.

I still don't understand the exact relation between linux' loader `ld-linux-x86-64.so` and the `execve()` system call (e.g. "who calls who?"). In Wikipedia it says that the loader is the handle for the `execve()` system call, but I'm not sure about what that means.

Other references:
- How the heck do we get to main()? [Link](http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html)
- How programs get run: [Link1](https://lwn.net/Articles/630727/) [Link2](https://lwn.net/Articles/631631/)
- The real power of linux executables [Link](https://ownyourbits.com/2018/05/23/the-real-power-of-linux-executables/)

Good to know:
- `strace` allows us to trace system calls and signals
- `ltrace` allows us to trace dynamic calls made to shared libraries

Useful links:

- https://stackoverflow.com/questions/26876247/how-does-execve-call-dynamic-linker-loader-ld-linux-so-2
- https://stackoverflow.com/questions/49818462/linux-misunderstanding-of-how-execv-function-loads-new-program
- https://unix.stackexchange.com/questions/498311/how-does-execve-call-a-special-start-up-routine-and-the-main-function
